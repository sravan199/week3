MAPS:
	The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values)
	 may be used as either a key or a value.
The keys in Map are ordered while keys added to object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.
You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.
A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.


Properties:
	Map.length
	The value of the length property is 0.

	get Map[@@species]
	The constructor function that is used to create derived objects.

	Map.prototype
	Represents the prototype for the Map constructor. Allows the addition of properties to all Map objects.
	Map instancesSection
	All Map instances inherit from Map.prototype.

	Map.prototype.constructor
	Returns the function that created an instance's prototype. This is the Map function by default.

	Map.prototype.size
	Returns the number of key/value pairs in the Map object.

MethodsSection:

	Map.prototype.clear()
	Removes all key/value pairs from the Map object.

	Map.prototype.delete(key)
	Returns true if an element in the Map object existed and has been removed, or false if the element does not exist. Map.prototype.has(key) 
	will return false afterwards.

	Map.prototype.entries()
	Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order.

	Map.prototype.forEach(callbackFn[, thisArg])
	Calls callbackFn once for each key-value pair present in the Map object, in insertion order. If a thisArg parameter is provided to forEach,
	 it will be used as the this value for each callback.
	
	Map.prototype.get(key)
	Returns the value associated to the key, or undefined if there is none.

	Map.prototype.has(key)
	Returns a boolean asserting whether a value has been associated to the key in the Map object or not.

	Map.prototype.keys()
	Returns a new Iterator object that contains the keys for each element in the Map object in insertion order.

	Map.prototype.set(key, value)
	Sets the value for the key in the Map object. Returns the Map object.

	Map.prototype.values()
	Returns a new Iterator object that contains the values for each element in the Map object in insertion order.

	Map.prototype[@@iterator]()
	Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order.